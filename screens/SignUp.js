import React, { useState } from "react";
import {
Â  View,
Â  Text,
Â  TextInput,
Â  TouchableOpacity,
Â  StyleSheet,
Â  Alert,
Â  Image,
Â  ScrollView,
} from "react-native";
import { FontAwesome5, FontAwesome, Feather } from "@expo/vector-icons";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from "../src/config/firebaseConfig";
import {
Â  validateEmail,
Â  validatePassword,
} from "../utils/validation";

import BackgroundWrapper from '../src/components/BackgroundWrapper'; 


export default function SignUp({ navigation }) {
Â  const [firstName, setFirstName] = useState("");
Â  const [lastName, Â setLastName] Â = useState("");
Â  const [email, Â  Â  setEmail] Â  Â  = useState("");
Â  const [password, Â setPassword] Â = useState("");
Â  const [confirmPassword, setConfirmPassword] = useState("");

Â  const [showPassword, Â  Â  Â  Â setShowPassword] Â  Â  Â  Â = useState(false);
Â  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
Â  const [showRules, Â  Â  Â  Â  Â  setShowRules] Â  Â  Â  Â  Â  = useState(false);

Â  const [errors, setErrors] = useState({
Â  Â  firstName: "",
Â  Â  lastName: "",
Â  Â  email: "",
Â  Â  password: "",
Â  Â  confirmPassword: "",
Â  });

Â  const [touched, setTouched] = useState({
Â  Â  firstName: false,
Â  Â  lastName: false,
Â  Â  email: false,
Â  Â  password: false,
Â  Â  confirmPassword: false,
Â  });

Â  // Reglas visuales de contraseÃ±a
Â  const isMinLength = password.length >= 6;
Â  const hasUpper Â  Â = /[A-Z]/.test(password);
Â  const hasLower Â  Â = /[a-z]/.test(password);
Â  const hasNumber Â  = /\d/.test(password);

Â  const validateField = (field, value) => {
Â  Â  let error = "";

Â  Â  switch (field) {
Â  Â  Â  case "firstName":
Â  Â  Â  Â  if (!value.trim()) error = "El nombre es obligatorio.";
Â  Â  Â  Â  else if (/[0-9]/.test(value)) error = "El nombre no puede llevar nÃºmeros."; 
Â  Â  Â  Â  else if (value.trim().length < 2) error = "MÃ­nimo 2 caracteres.";
Â  Â  Â  Â  break;
Â  Â  Â  case "lastName":
Â  Â  Â  Â  if (!value.trim()) error = "El apellido es obligatorio.";
Â  Â  Â  Â  else if (/[0-9]/.test(value)) error = "El apellido no puede llevar nÃºmeros.";
Â  Â  Â  Â  else if (value.trim().length < 2) error = "MÃ­nimo 2 caracteres.";
Â  Â  Â  Â  break;
Â  Â  Â  case "email":
Â  Â  Â  Â  error = validateEmail(value) || "";
Â  Â  Â  Â  break;
Â  Â  Â  case "password":
Â  Â  Â  Â  error = validatePassword(value) || "";
Â  Â  Â  Â  break;
Â  Â  Â  case "confirmPassword":
Â  Â  Â  Â  if (!value) error = "Debe confirmar su contraseÃ±a.";
Â  Â  Â  Â  else if (value !== password) error = "Las contraseÃ±as no coinciden.";
Â  Â  Â  Â  break;
Â  Â  Â  default:
Â  Â  Â  Â  break;
Â  Â  }

Â  Â  setErrors((prev) => ({ ...prev, [field]: error }));
Â  Â  return !error;
Â  };

Â  const handleBlur = (field) => {
Â  Â  setTouched((prev) => ({ ...prev, [field]: true }));
Â  Â  const values = { firstName, lastName, email, password, confirmPassword };
Â  Â  validateField(field, values[field]);
Â  };

Â  const handleChange = (field, value) => {
Â  Â  let cleanValue = value;
Â  Â  
Â  Â  if (field === 'firstName' || field === 'lastName') {
Â  Â  Â  Â  cleanValue = value.replace(/[0-9]/g, '');
Â  Â  }

Â  Â  switch (field) {
Â  Â  Â  case "firstName":
Â  Â  Â  Â  setFirstName(cleanValue);
Â  Â  Â  Â  break;
Â  Â  Â  case "lastName":
Â  Â  Â  Â  setLastName(cleanValue);
Â  Â  Â  Â  break;
Â  Â  Â  case "email":
Â  Â  Â  Â  setEmail(value);
Â  Â  Â  Â  break;
Â  Â  Â  case "password":
Â  Â  Â  Â  setPassword(value);
Â  Â  Â  Â  break;
Â  Â  Â  case "confirmPassword":
Â  Â  Â  Â  setConfirmPassword(value);
Â  Â  Â  Â  break;
Â  Â  Â  default:
Â  Â  Â  Â  break;
Â  Â  }
Â  Â  if (touched[field]) {
Â  Â  Â  validateField(field, cleanValue);
Â  Â  }
Â  };

Â  const handleSignUp = async () => {
Â  Â  // Marcar todos como tocados
Â  Â  setTouched({
Â  Â  Â  firstName: true,
Â  Â  Â  lastName: true,
Â  Â  Â  email: true,
Â  Â  Â  password: true,
Â  Â  Â  confirmPassword: true,
Â  Â  });

Â  Â  // Validar todos
Â  Â  const firstNameOk Â  Â  Â  = validateField("firstName", firstName);
Â  Â  const lastNameOk Â  Â  Â  Â = validateField("lastName", lastName);
Â  Â  const emailOk Â  Â  Â  Â  Â  = validateField("email", email);
Â  Â  const passwordOk Â  Â  Â  Â = validateField("password", password);
Â  Â  const confirmPasswordOk = validateField("confirmPassword", confirmPassword);

Â  Â  if (!firstNameOk || !lastNameOk || !emailOk || !passwordOk || !confirmPasswordOk) {
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  await createUserWithEmailAndPassword(auth, email, password);
Â  Â  Â  Alert.alert("Registro exitoso", `Usuario ${email} registrado correctamente`);
Â  Â  Â  navigation.navigate("Login");
Â  Â  } catch (error) {
Â  Â  Â  let errorMessage = "Hubo un problema al registrar el usuario.";
Â  Â  Â  switch (error.code) {
Â  Â  Â  Â  case "auth/email-already-in-use":
Â  Â  Â  Â  Â  errorMessage = "Este correo ya estÃ¡ registrado.";
Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case "auth/invalid-email":
Â  Â  Â  Â  Â  errorMessage = "El formato del correo no es vÃ¡lido.";
Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case "auth/weak-password":
Â  Â  Â  Â  Â  errorMessage = "La contraseÃ±a es muy dÃ©bil.";
Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  break;
Â  Â  Â  }
Â  Â  Â  Alert.alert("Error", errorMessage);
Â  Â  }
Â  };

Â  return (
Â  Â  // ðŸ›‘ ELIMINAMOS EL VIEW pageContainer y usamos BackgroundWrapper como raÃ­z
Â  Â  <BackgroundWrapper>
Â  Â  Â  {/* Usamos ScrollView para permitir el desplazamiento */}
Â  Â  Â  <ScrollView contentContainerStyle={styles.scrollContent} keyboardShouldPersistTaps="handled">
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  <Image source={require("../assets/logo.png")} style={styles.logo} />
Â  Â  Â  Â  Â  <Text style={styles.title}>Crear cuenta</Text>

Â  Â  Â  Â  Â  {/* Nombre */}
Â  Â  Â  Â  Â  <View style={[
Â  Â  Â  Â  Â  Â  styles.inputContainerNew,
Â  Â  Â  Â  Â  Â  touched.firstName && errors.firstName ? styles.inputContainerError : null
Â  Â  Â  Â  Â  ]}>
Â  Â  Â  Â  Â  Â  <FontAwesome name="user-o" size={18} color="#888" style={styles.inputIcon} />
Â  Â  Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  Â  Â  style={styles.inputNew}
Â  Â  Â  Â  Â  Â  Â  placeholder="Nombre"
Â  Â  Â  Â  Â  Â  Â  value={firstName}
Â  Â  Â  Â  Â  Â  Â  onChangeText={(v) => handleChange("firstName", v)}
Â  Â  Â  Â  Â  Â  Â  onBlur={() => handleBlur("firstName")}
Â  Â  Â  Â  Â  Â  Â  returnKeyType="next"
Â  Â  Â  Â  Â  Â  Â  keyboardType="default" 
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {touched.firstName && errors.firstName ? (
Â  Â  Â  Â  Â  Â  <Text style={styles.errorText}>{errors.firstName}</Text>
Â  Â  Â  Â  Â  ) : null}

Â  Â  Â  Â  Â  {/* Apellido */}
Â  Â  Â  Â  Â  <View style={[
Â  Â  Â  Â  Â  Â  styles.inputContainerNew,
Â  Â  Â  Â  Â  Â  touched.lastName && errors.lastName ? styles.inputContainerError : null
Â  Â  Â  Â  Â  ]}>
Â  Â  Â  Â  Â  Â  <FontAwesome name="user-o" size={18} color="#888" style={styles.inputIcon} />
Â  Â  Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  Â  Â  style={styles.inputNew}
Â  Â  Â  Â  Â  Â  Â  placeholder="Apellido"
Â  Â  Â  Â  Â  Â  Â  value={lastName}
Â  Â  Â  Â  Â  Â  Â  onChangeText={(v) => handleChange("lastName", v)}
Â  Â  Â  Â  Â  Â  Â  onBlur={() => handleBlur("lastName")}
Â  Â  Â  Â  Â  Â  Â  returnKeyType="next"
Â  Â  Â  Â  Â  Â  Â  keyboardType="default"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {touched.lastName && errors.lastName ? (
Â  Â  Â  Â  Â  Â  <Text style={styles.errorText}>{errors.lastName}</Text>
Â  Â  Â  Â  Â  ) : null}

Â  Â  Â  Â  Â  {/* Email */}
Â  Â  Â  Â  Â  <View style={[
Â  Â  Â  Â  Â  Â  styles.inputContainerNew,
Â  Â  Â  Â  Â  Â  touched.email && errors.email ? styles.inputContainerError : null
Â  Â  Â  Â  Â  ]}>
Â  Â  Â  Â  Â  Â  <Feather name="mail" size={18} color="#888" style={styles.inputIcon} />
Â  Â  Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  Â  Â  style={styles.inputNew}
Â  Â  Â  Â  Â  Â  Â  placeholder="Correo electrÃ³nico"
Â  Â  Â  Â  Â  Â  Â  value={email}
Â  Â  Â  Â  Â  Â  Â  onChangeText={(v) => handleChange("email", v)}
Â  Â  Â  Â  Â  Â  Â  onBlur={() => handleBlur("email")}
Â  Â  Â  Â  Â  Â  Â  keyboardType="email-address"
Â  Â  Â  Â  Â  Â  Â  autoCapitalize="none"
Â  Â  Â  Â  Â  Â  Â  returnKeyType="next"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {touched.email && errors.email ? (
Â  Â  Â  Â  Â  Â  <Text style={styles.errorText}>{errors.email}</Text>
Â  Â  Â  Â  Â  ) : null}

Â  Â  Â  Â  Â  {/* Password */}
Â  Â  Â  Â  Â  <View style={[
Â  Â  Â  Â  Â  Â  styles.inputContainerNew,
Â  Â  Â  Â  Â  Â  touched.password && errors.password ? styles.inputContainerError : null
Â  Â  Â  Â  Â  ]}>
Â  Â  Â  Â  Â  Â  <FontAwesome5 name="lock" size={16} color="#888" style={styles.inputIcon} />
Â  Â  Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  Â  Â  style={styles.inputNew}
Â  Â  Â  Â  Â  Â  Â  placeholder="ContraseÃ±a"
Â  Â  Â  Â  Â  Â  Â  value={password}
Â  Â  Â  Â  Â  Â  Â  onChangeText={(v) => handleChange("password", v)}
Â  Â  Â  Â  Â  Â  Â  onFocus={() => setShowRules(true)}
Â  Â  Â  Â  Â  Â  Â  onBlur={() => {
Â  Â  Â  Â  Â  Â  Â  Â  setShowRules(false);
Â  Â  Â  Â  Â  Â  Â  Â  handleBlur("password");
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  secureTextEntry={!showPassword}
Â  Â  Â  Â  Â  Â  Â  returnKeyType="next"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
Â  Â  Â  Â  Â  Â  Â  <FontAwesome name={showPassword ? "eye-slash" : "eye"} size={18} color="#888" />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {touched.password && errors.password ? (
Â  Â  Â  Â  Â  Â  <Text style={styles.errorText}>{errors.password}</Text>
Â  Â  Â  Â  Â  ) : null}

Â  Â  Â  Â  Â  {/* Reglas visibles solo al enfocar */}
Â  Â  Â  Â  Â  {showRules && (
Â  Â  Â  Â  Â  Â  <View style={styles.rulesContainer}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.ruleTitle}>Requisitos de ContraseÃ±a:</Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.rule, isMinLength ? styles.valid : styles.invalid]}>
Â  Â  Â  Â  Â  Â  Â  Â  - MÃ­nimo 6 caracteres
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.rule, hasUpper ? styles.valid : styles.invalid]}>
Â  Â  Â  Â  Â  Â  Â  Â  - Usar al menos una letra mayÃºscula
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.rule, hasLower ? styles.valid : styles.invalid]}>
Â  Â  Â  Â  Â  Â  Â  Â  - Usar al menos una letra minÃºscula
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.rule, hasNumber ? styles.valid : styles.invalid]}>
Â  Â  Â  Â  Â  Â  Â  Â  - Incluir al menos un nÃºmero
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {/* Confirm Password */}
Â  Â  Â  Â  Â  <View style={[
Â  Â  Â  Â  Â  Â  styles.inputContainerNew,
Â  Â  Â  Â  Â  Â  touched.confirmPassword && errors.confirmPassword ? styles.inputContainerError : null
Â  Â  Â  Â  Â  ]}>
Â  Â  Â  Â  Â  Â  <FontAwesome5 name="lock" size={16} color="#888" style={styles.inputIcon} />
Â  Â  Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  Â  Â  style={styles.inputNew}
Â  Â  Â  Â  Â  Â  Â  placeholder="Confirmar contraseÃ±a"
Â  Â  Â  Â  Â  Â  Â  value={confirmPassword}
Â  Â  Â  Â  Â  Â  Â  onChangeText={(v) => handleChange("confirmPassword", v)}
Â  Â  Â  Â  Â  Â  Â  onBlur={() => handleBlur("confirmPassword")}
Â  Â  Â  Â  Â  Â  Â  secureTextEntry={!showConfirmPassword}
Â  Â  Â  Â  Â  Â  Â  returnKeyType="done"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
Â  Â  Â  Â  Â  Â  Â  <FontAwesome name={showConfirmPassword ? "eye-slash" : "eye"} size={18} color="#888" />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {touched.confirmPassword && errors.confirmPassword ? (
Â  Â  Â  Â  Â  Â  <Text style={styles.errorText}>{errors.confirmPassword}</Text>
Â  Â  Â  Â  Â  ) : null}

Â  Â  Â  Â  Â  {/* BotÃ³n registrar */}
Â  Â  Â  Â  Â  <TouchableOpacity style={styles.buttonPrimary} onPress={handleSignUp}>
Â  Â  Â  Â  Â  Â  <Text style={styles.buttonText}>Registrarse</Text>
Â  Â  Â  Â  Â  </TouchableOpacity>

Â  Â  Â  Â  Â  {/* Ir a Login */}
Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => navigation.navigate("Login")} style={styles.linkLogin}>
Â  Â  Â  Â  Â  Â  <Text style={styles.linkTextFooter}>
Â  Â  Â  Â  Â  Â  Â  Â¿Ya tienes una cuenta? <Text style={styles.linkBold}>Iniciar sesiÃ³n</Text>
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  </TouchableOpacity>

Â  Â  Â  Â  Â  <Text style={styles.footerText}>
Â  Â  Â  Â  Â  Â  Â© 2025 - Instituto Superior Del Milagro. Todos los derechos reservados.
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>
Â  Â  Â  </ScrollView>
Â  Â  </BackgroundWrapper>
Â  );
}

const COLOR_PRIMARY = "#8D1E2A";
const INPUT_BACKGROUND_COLOR = "#F5F5F5";

const styles = StyleSheet.create({
Â  // ðŸ›‘ CORRECCIÃ“N CLAVE: Usamos flexGrow y aseguramos centrado si el contenido es corto.
Â  scrollContent: {
Â  Â  flexGrow: 1, // Permite que el contenido se extienda y se active el scroll
Â  Â  justifyContent: "center", // Asegura que la tarjeta se vea centrada verticalmente si hay espacio
Â  Â  alignItems: "center",
Â  Â  padding: 20,
Â  Â  backgroundColor: 'transparent',
Â  },
Â  card: {
Â  Â  width: "100%",
Â  Â  maxWidth: 400,
Â  Â  backgroundColor: "rgba(255, 255, 255, 0.95)", // Fondo blanco semi-transparente
Â  Â  borderRadius: 8,
Â  Â  padding: 30,
Â  Â  alignItems: "center",
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 5,
Â  },
Â  logo: {
Â  Â  width: 100,
Â  Â  height: 100,
Â  Â  marginBottom: 25,
Â  Â  resizeMode: "contain",
Â  },
Â  title: {
Â  Â  fontSize: 26,
Â  Â  fontWeight: "bold",
Â  Â  marginBottom: 30,
Â  Â  color: "#333",
Â  },
Â  inputContainerNew: {
Â  Â  flexDirection: "row",
Â  Â  alignItems: "center",
Â  Â  backgroundColor: INPUT_BACKGROUND_COLOR,
Â  Â  borderRadius: 5,
Â  Â  paddingHorizontal: 12,
Â  Â  height: 50,
Â  Â  marginBottom: 8,
Â  Â  width: "100%",
Â  Â  borderWidth: 1,
Â  Â  borderColor: INPUT_BACKGROUND_COLOR,
Â  },
Â  inputContainerError: {
Â  Â  borderColor: "#ff6b6b",
Â  },
Â  inputIcon: {
Â  Â  marginRight: 10,
Â  },
Â  inputNew: {
Â  Â  flex: 1,
Â  Â  height: "100%",
Â  Â  fontSize: 16,
Â  Â  color: "#333",
Â  Â  paddingVertical: 0,
Â  },
Â  rulesContainer: {
Â  Â  alignSelf: "flex-start",
Â  Â  width: "100%",
Â  Â  marginBottom: 12,
Â  Â  paddingLeft: 12,
Â  },
Â  ruleTitle: {
Â  Â  fontWeight: "bold",
Â  Â  fontSize: 14,
Â  Â  marginBottom: 3,
Â  Â  color: "#333",
Â  },
Â  rule: {
Â  Â  fontSize: 13,
Â  },
Â  valid: {
Â  Â  color: "green",
Â  },
Â  invalid: {
Â  Â  color: "#888",
Â  },
Â  errorText: {
Â  Â  alignSelf: "flex-start",
Â  Â  color: "#ff6b6b",
Â  Â  fontSize: 12,
Â  Â  marginBottom: 6,
Â  Â  paddingLeft: 4,
Â  },
Â  buttonPrimary: {
Â  Â  backgroundColor: COLOR_PRIMARY,
Â  Â  paddingVertical: 15,
Â  Â  borderRadius: 5,
Â  Â  width: "100%",
Â  Â  alignItems: "center",
Â  Â  marginTop: 12,
Â  Â  marginBottom: 10,
Â  },
Â  buttonText: {
Â  Â  color: "#fff",
Â  Â  fontSize: 18,
Â  Â  fontWeight: "bold",
Â  },
Â  linkTextFooter: {
Â  Â  color: "#666",
Â  Â  fontSize: 14,
Â  Â  textAlign: "center",
Â  },
Â  linkBold: {
Â  Â  fontWeight: "bold",
Â  Â  color: COLOR_PRIMARY,
Â  },
Â  linkLogin: {
Â  Â  alignSelf: "center",
Â  Â  marginBottom: 10,
Â  },
Â  footerText: {
Â  Â  marginTop: 24,
Â  Â  fontSize: 12,
Â  Â  color: "#888",
Â  Â  textAlign: "center",
Â  },
});